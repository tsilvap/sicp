#+TITLE: Chapter 1: Building Abstractions With Procedures
#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{amsmath}

* Exercise 1.1
Below is a sequence of expressions.  What is the result printed by the
interpreter in response to each expression?  Assume that the sequence is to be
evaluated in the order in which it is presented.

#+begin_src scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b
      a)
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
#+end_src

* Solution 1.1
The results are, in this order:
#+begin_export ascii
10
12
8
3
6
(no output)
(no output)
19
#f
4
16
6
16
#+end_export

Indeed, we can verify the results by evaluating this code block.

#+begin_src scheme :results output
  (let ((exprs '(10
                 (+ 5 3 4)
                 (- 9 1)
                 (/ 6 2)
                 (+ (* 2 4) (- 4 6))
                 (define a 3)
                 (define b (+ a 1))
                 (+ a b (* a b))
                 (= a b)
                 (if (and (> b a) (< b (* a b)))
                     b
                     a)
                 (cond ((= a 4) 6)
                       ((= b 4) (+ 6 7 a))
                       (else 25))
                 (+ 2 (if (> b a) b a))
                 (* (cond ((> a b) a)
                          ((< a b) b)
                          (else -1))
                    (+ a 1)))))
    (for-each (lambda (expr)
                (display (eval expr (interaction-environment)))
                (newline))
              exprs))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
#<unspecified>
#<unspecified>
19
#f
4
16
6
16
#+end_example


* Exercise 1.2
Translate the following expression into prefix form:

$$\frac{5+4+(2-(3-(6+\frac{4}{5})))}{3(6-2)(2-7)}$$.

* Solution 1.2
#+begin_src scheme
  (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+end_src


* Exercise 1.3
Define a procedure that takes three numbers as arguments and returns
the sum of the squares of the two larger numbers.

* Solution 1.3
#+begin_src scheme :session 1-3
  (define (sum-of-squares-of-two-largest x y z)
    (cond ((and (<= x y) (<= x z))
	   (sum-of-squares y z))
	  ((and (<= y x) (<= y z))
	   (sum-of-squares x z))
	  ((and (<= z x) (<= z y))
	   (sum-of-squares x y))))

  (define (sum-of-squares x y)
    (+ (* x x) (* y y)))
#+end_src

#+RESULTS:
: #<unspecified>

To test it out, this should yield 41:
#+begin_src scheme :session 1-3
  (sum-of-squares-of-two-largest 5 3 4)
#+end_src

#+RESULTS:
: 41


* Exercise 1.4
Observe that our model of evaluation allows for combinations whose
operators are compound expressions.  Use this observation to describe
the behavior of the following procedure:

#+begin_src scheme
  (define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))
#+end_src


* Exercise 1.5
Ben Bitdiddle has invented a test to determine whether the interpreter
he is faced with is using applicative order evaluation or normal-order
evaluation.  He defines the following two procedures:

#+begin_src scheme
  (define (p) (p))

  (define (test x y)
    (if (= x 0)
	0
	y))
#+end_src

Then he evaluates the expression

#+begin_src scheme
  (test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses
applicative-order evaluation?  What behavior will he observe with an
interpreter that uses normal-order evaluation?  Explain your answer.
(Assume that the evaluation rule for the special form =if= is the same
whether the interpreter is using normal or applicative order: The
predicate expression is evaluated first, and the result determines
whether to evaluate the consequent or the alternative expression.)


* Exercise 1.6
Alyssa P. Hacker doesn't see why =if= needs to be provided as a
special form.  "Why can't I just define it as an ordinary procedure in
terms of =cond=?" she asks.  Alyssa's friend Eva Lu Ator claims this
can indeed be done, and she defines a new version of =if=:

#+begin_src scheme :session 1-6
  (define (new-if predicate
		  then-clause
		  else-clause)
    (cond (predicate then-clause)
	  (else else-clause)))
#+end_src

#+RESULTS:
: #<unspecified>

Eva demonstrates the program for Alyssa:

#+begin_src scheme :session 1-6
  (new-if (= 2 3) 0 5)
#+end_src

#+RESULTS:
: 5

#+begin_src scheme :session 1-6
  (new-if (= 1 1) 0 5)
#+end_src

#+RESULTS:
: 0

Delighted, Alyssa uses =new-if= to rewrite the square-root program:

#+begin_src scheme :session 1-6
  (define (sqrt-iter guess x)
    (new-if (good-enough? guess x)
	    guess
	    (sqrt-iter (improve guess x) x)))
#+end_src

What happens when Alyssa attempts to use this to compute square roots?
Explain.


* Exercise 1.7
The =good-enough?= test used in computing square roots will not be
very effective for finding the square roots of very small numbers.
Also, in real computers, arithmetic operations are almost always
performed with limited precision.  This makes our test inadequate for
very large numbers.  Explain these statements, with examples showing
how the test fails for small and large numbers.  An alternative
strategy for implementing =good-enough?= is to watch how =guess=
changes from one iteration to the next and to stop when the change is
a very small fraction of the guess.  Design a square-root procedure
that uses this kind of end test.  Does this work better for small and
large numbers?


* Exercise 1.8
Newton's method for cube roots is based on the fact that if $y$ is an
approximation to the cube root of $x$, then a better approximation is
given by the value

\[ \frac{x/y^2 + 2y}{3} \].

Use this formula to implement a cube-root procedure analogous to the
square-root procedure.  (In 1.3.4 we will see how to implement
Newton's method in general as an abstraction of the square-root and
cube-root procedures.)

* Solution 1.8
#+begin_src scheme :session 1-8
  (define (cbrt-iter guess x)
    (if (good-enough? guess x)
	guess
	(cbrt-iter (improve guess x) x)))

  (define (improve guess x)
    (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))

  (define (good-enough? guess x)
    (< (abs (- (cube guess) x)) 0.001))

  (define (cube x)
    (* x x x))

  (define (cbrt x)
    (cbrt-iter 1.0 x))
#+end_src

#+RESULTS:
: #<unspecified>

We can test this out by calculating the cube-root of $18$ (whose actual
value is approximately $2.62074139421$):

#+begin_src scheme :session 1-8
  (cbrt 18)
#+end_src

#+RESULTS:
: 2.620761740237634


* Exercise 1.9
Each of the following two procedures defines a method for adding two
positive integers in terms of the procedures =inc=, which increments
its argument by $1$, and =dec=, which decrements its argument by $1$.

#+begin_src scheme
  (define (+ a b)
    (if (= a 0)
	b
	(inc (+ (dec a) b))))
#+end_src

#+begin_src scheme
  (define (+ a b)
    (if (= a 0)
	b
	(+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each
procedure in evaluating =(+ 4 5)=.  Are these processes iterative or
recursive?


* Exercise 1.10
The following procedure computes a mathematical function called
Ackermann's function.

#+begin_src scheme
  (define (A x y)
    (cond ((= y 0) 0)
	  ((= x 0) (* 2 y))
	  ((= y 1) 2)
	  (else (A (- x 1)
		   (A x (- y 1))))))
#+end_src

What are the values of the following expressions?

#+begin_src scheme
  (A 1 10)
  (A 2 4)
  (A 3 3)
#+end_src

Consider the following procedures, where =A= is the procedure defined
above:

#+begin_src scheme
  (define (f n) (A 0 n))
  (define (g n) (A 1 n))
  (define (h n) (A 2 n))
  (define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by
the procedures =f=, =g=, and =h= for positive integer values of $n$.
For example, =(k n)= computes $5n^2$.


* Exercise 1.11
A function $f$ is defined by the rule that $f(n) = n$ if $n < 3$ and
$f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3)$ if $n \geq 3$.  Write a
procedure that computes $f$ by means of a recursive process.  Write a
procedure that computes $f$ by means of an iterative process.

* Solution 1.11
Recursive process:

#+begin_src scheme
  (define (f n)
    (if (< n 3)
	n
	(+ (f (- n 1))
	   (* 2 (f (- n 2)))
	   (* 3 (f (- n 3))))))
#+end_src


* Exercise 1.12
The following pattern of numbers is called Pascal's triangle.

        1
      1   1
    1   2   1
  1   3   3   1
1   4   6   4   1

The numbers at the edge of the triangle are all 1, and each number inside the
triangle is the sum of the two numbers above it. Write a procedure that computes
elements of Pascal's triangle by means of a recursive process.

* Solution 1.12

#+begin_src scheme :session
  (define (pascal row column)
    (cond ((= column 1) 1)
          ((= column row) 1)
          (else (+ (pascal (1- row) (1- column))
                   (pascal (1- row) column)))))
#+end_src

#+RESULTS:
: #<unspecified>

We can display a Pascal triangle of n rows like so:

#+begin_src scheme :session
  (define (pascal-row row)
    (map (lambda (col) (pascal row col)) (iota row 1)))

  (define (pascal-triangle n)
    (map pascal-row (iota n 1)))

  (pascal-triangle 10)
#+end_src

#+RESULTS:
| 1 |   |    |    |     |     |    |    |   |   |
| 1 | 1 |    |    |     |     |    |    |   |   |
| 1 | 2 |  1 |    |     |     |    |    |   |   |
| 1 | 3 |  3 |  1 |     |     |    |    |   |   |
| 1 | 4 |  6 |  4 |   1 |     |    |    |   |   |
| 1 | 5 | 10 | 10 |   5 |   1 |    |    |   |   |
| 1 | 6 | 15 | 20 |  15 |   6 |  1 |    |   |   |
| 1 | 7 | 21 | 35 |  35 |  21 |  7 |  1 |   |   |
| 1 | 8 | 28 | 56 |  70 |  56 | 28 |  8 | 1 |   |
| 1 | 9 | 36 | 84 | 126 | 126 | 84 | 36 | 9 | 1 |


* Exercise 1.13
Prove that \( \mathrm{Fib}(n) \) is the closest integer to \(
\phi^{n} / \sqrt{5} \), where \( \phi = (1 + \sqrt{5}) / 2 \).
Hint: Let \( \psi = (1 - \sqrt{5}) / 2 \).  Use induction and the
definition of the Fibonacci numbers (see 1.2.2) to prove that \(
\mathrm{Fib}(n) = (\phi^n - \psi^n) / \sqrt{5} \).

* Solution 1.13
*Proposition 1.* If \( \mathrm{Fib}(k) = (\phi^k - \psi^k) / \sqrt{5} \) and \( \mathrm{Fib}(k+1) = (\phi^{k+1} - \psi^{k+1}) / \sqrt{5} \),
for some integer \( k \), then \( \mathrm{Fib}(k+2) = (\phi^{k+2} - \psi^{k+2}) / \sqrt{5} \).

\begin{align*}
 \mathrm{Fib}(k+2)
 &= \mathrm{Fib}(k+1) + \mathrm{Fib}(k) \\
 &= \frac{\phi^{k+1} - \psi^{k+1}}{\sqrt{5}} + \frac{\phi^k - \psi^k}{\sqrt{5}} \\
 &= \frac{\phi^k(\phi + 1) - \psi^k(\psi + 1)}{\sqrt{5}} \\
 &= \frac{\phi^{k+2} - \psi^{k+2}}{\sqrt{5}}
\end{align*}

since \( \phi^2 = \phi + 1 \) and \( \psi^2 = \psi + 1 \).

*Proposition 2.* \( \mathrm{Fib}(n) = (\phi^n - \psi^n) / \sqrt{5} \), for all natural \( n \).

It holds for \( n = 0 \):

\[ (\phi^0 - \psi^0)/\sqrt{5} = (1 - 1)/\sqrt{5} = 0 \], which is \( \mathrm{Fib}(0) \).

And also for \( n = 1 \):

\[ \frac{\phi^1 - \psi^1}{\sqrt{5}}= \frac{(1 + \sqrt{5})/2 - (1 -\sqrt{5})/2}{\sqrt{5}} = \frac{(2 \sqrt{5}) / 2}{\sqrt{5}} = 1 \], which is \( \mathrm{Fib}(1) \).

Then, as a consequence of Proposition 1, it should hold for all
successors of \( 1 \) as well.

*Proposition 3.* \( \lvert \phi^n / \sqrt{5} - \mathrm{Fib}(n) \rvert < 1/2 \).

\begin{align*}
 \lvert \phi^n / \sqrt{5} - \mathrm{Fib}(n) \rvert
 &= \lvert \frac{ \phi^n }{ \sqrt{5} } - \frac { \phi^n - \psi^n }{ \sqrt{5} } \rvert \\
 &= \frac{ \lvert \psi^n \lvert }{ \sqrt{5} } \\
 &= \frac{ \lvert 1 - \sqrt{5} \rvert^n  }{ 2^n \sqrt{5} } \\
 &< \frac{ 2^n }{ 2^n \sqrt{5} } = \frac{1}{ \sqrt{5} } < \frac{1}{2}
\end{align*}

We already know \( \mathrm{Fib}(n) \) is an integer from the definition of the
Fibonacci sequence, and so with Proposition 3 we've proved \( \mathrm{Fib}(n) \) is
the closest integer to \( \phi^{n} / \sqrt{5} \).

* Exercise 1.14
Draw the tree illustrating the process generated by the ~count-change~
procedure of 1.2.2 in making change for 11 cents.  What are the orders
of growth of the space and number of steps used by this process as the
amount to be changed increases?

* Solution 1.14
** Recursion tree
*** (cc 11 5)
**** (cc 11 4)
***** (cc 11 3)
****** (cc 11 2)
******* (cc 11 1)
******** (cc 11 0) = 0
******** (cc 10 1)
********* (cc 10 0) = 0
********* (cc 9 1)
********** (cc 9 0) = 0
********** (cc 8 1)
*********** (cc 8 0) = 0
*********** (cc 7 1)
************ (cc 7 0) = 0
************ (cc 6 1)
************* (cc 6 0) = 0
************* (cc 5 1)
************** (cc 5 0) = 0
************** (cc 4 1)
*************** (cc 4 0) = 0
*************** (cc 3 1)
**************** (cc 3 0) = 0
**************** (cc 2 1)
***************** (cc 2 0) = 0
***************** (cc 1 1)
****************** (cc 1 0) = 0
****************** (cc 0 1)
= 1

******* (cc 6 2)
******** (cc 6 1)
********* (cc 6 0) = 0
********* (cc 5 1)
********** (cc 5 0) = 0
********** (cc 4 1)
*********** (cc 4 0) = 0
*********** (cc 3 1)
************ (cc 3 0) = 0
************ (cc 2 1)
************* (cc 2 0) = 0
************* (cc 1 1)
************** (cc 1 0) = 0
************** (cc 0 1)
= 1
******** (cc 1 2)
********* (cc 1 1)
********** (cc 1 0) = 0
********** (cc 0 1)
= 1
********* (cc -4 2) = 0
****** (cc 1 3)
******* (cc 1 2)
******** (cc 1 1)
********* (cc 1 0) = 0
********* (cc 0 1)
= 1
******** (cc -4 2) = 0
******* (cc -9 3) = 0
***** (cc -14 4) = 0
**** (cc -39 5) = 0


** Space complexity
The space complexity is \( \Theta(n) \) just like the Fibonacci
tree-recursive algorithm (we only need to keep track of the nodes
above us).

** TODO Number of steps complexity
Got this insight from: https://zthomae.github.io/sicp/c1e14.html

insight: The ~kinds-of-coins~ argument is very annoying, if we start
from 5.  But does this argument also obey some sort of pattern?  Start
analyzing with ~kinds-of-coins~ equal to 1 (rather easy), and analyze
what happens with ~kinds-of-coins~ equal to 2, and 3, and so on.

(See G. Polya: "*If you cannot solve the proposed problem* do not let
this failure afflict you too much but try to find consolation with
some easier success, /try to solve first some related problem/; [...]")

* Exercise 1.15
The sine of an angle (specified in radians) can be computed by making
use of the approximation \( \sin{x} \approx x \) if \( x \) is sufficiently small, and the
trigonometric identity

\[ \sin{x} = 3\sin{\frac{x}{3}} - 4\sin^3{\frac{x}{3}} \]

to reduce the size of the argument of \( \sin \).  (For purposes of this
exercise an angle is considered “sufficiently small” if its magnitude
is not greater than 0.1 radians.)  These ideas are incorporated in the
following procedures:

#+begin_src scheme
  (define (cube x) (* x x x))

  (define (p x) (- (* 3 x) (* 4 (cube x))))

  (define (sine angle)
    (if (not (> (abs angle) 0.1))
        angle
        (p (sine (/ angle 3.0)))))
#+end_src

a. How many times is the procedure ~p~ applied when ~(sine 12.15)~ is
evaluated?

b. What is the order of growth in space and number of steps (as a
function of /a/) used by the process generated by the sine procedure
when ~(sine a)~ is evaluated?
